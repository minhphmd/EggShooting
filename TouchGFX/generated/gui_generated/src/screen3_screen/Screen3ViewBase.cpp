/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen3_screen/Screen3ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include<images/SVGDatabase.hpp>

Screen3ViewBase::Screen3ViewBase() :
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_240X320_PUZZLE_ID));
    add(background);

    border.setPosition(0, 240, 240, 30);
    borderPainter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    border.setPainter(borderPainter);
    border.setStart(0, 15);
    border.setEnd(240, 15);
    border.setLineWidth(5);
    border.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(border);

    red.setPosition(0, 0, 240, 320);
    red.setCenter(120, 270);
    red.setRadius(12);
    red.setLineWidth(0);
    red.setArc(0, 360);
    redPainter.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    red.setPainter(redPainter);
    add(red);

    backButton.setXY(0, 284);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_PRESSED_ID));
    backButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_UCRK));
    backButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backButton.setAction(buttonCallback);
    add(backButton);

    svgImage1.setSVG(SVG_BLUE_ARROW_SVG_ID);
    svgImage1.setPosition(0, 0, 240, 320);
    svgImage1.setScale(0.2f, 0.1f);
    svgImage1.setImagePosition(120, 230);
    svgImage1.setRotationCenter(120, 256);
    svgImage1.setRotation(0.0f);
    add(svgImage1);

    scoreArea.setXY(100, 284);
    scoreArea.setColor(touchgfx::Color::getColorFromRGB(80, 252, 0));
    scoreArea.setLinespacing(0);
    Unicode::snprintf(scoreAreaBuffer, SCOREAREA_SIZE, "%s", touchgfx::TypedText(T_SCORE).getText());
    scoreArea.setWildcard(scoreAreaBuffer);
    scoreArea.resizeToCurrentText();
    scoreArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GFZY));
    add(scoreArea);
}

Screen3ViewBase::~Screen3ViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen3ViewBase::setupScreen()
{

}

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &backButton)
    {
        //backButton
        //When backButton clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
}

void Screen3ViewBase::handleTickEvent()
{
    //debugEvent
    //When every N tick call virtual function
    //Call tickEvent
    tickEvent();
}
